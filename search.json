[{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Evaluate time series forecasts with casteval","text":"casteval R package helps automate evaluation time series forecasts. provides functionality formatting, processing, scoring, visualizing forecasts. typical workflow using casteval : Create forecast object inputting forecast metadata create_forecast() Score forecast using score(), accepts forecast object(s), corresponding observations, particular scoring function Visualize forecast using plot_forecast() scored forecast observations vignette guides process.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"create-a-forecast-object","dir":"Articles","previous_headings":"","what":"Create a forecast object","title":"Evaluate time series forecasts with casteval","text":"order create forecast object, forecast must first cast one accepted formats, namely data frame list.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"forecast-data-frame","dir":"Articles","previous_headings":"Create a forecast object","what":"Forecast input as data frames","title":"Evaluate time series forecasts with casteval","text":"Forecast data frames must contain: time column, can contain either numbers, dates, date-times forecast data, can passed raw summarized. Raw forecast data individual realizations model. Summarized forecast data describes ensemble realizations quantiles computed time point.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"raw-forecast-data","dir":"Articles","previous_headings":"Create a forecast object > Forecast input as data frames","what":"Raw forecast data","title":"Evaluate time series forecasts with casteval","text":"Raw forecast data must passed column named val. sim column may provided optionally identify different realizations (enables scoring plotting features).","code":"# raw forecast over with numeric times, without simulation numbers data.frame(   time=rep(1:5,each=3),   val=c(     100, 110, 120, 130, 140,     101, 111, 121, 131, 141,     102, 112, 122, 132, 142   ) ) #>    time val #> 1     1 100 #> 2     1 110 #> 3     1 120 #> 4     2 130 #> 5     2 140 #> 6     2 101 #> 7     3 111 #> 8     3 121 #> 9     3 131 #> 10    4 141 #> 11    4 102 #> 12    4 112 #> 13    5 122 #> 14    5 132 #> 15    5 142 # raw forecast data with dates, with simulation numbers data.frame(   sim=rep(1:3,each=5),   time=lubridate::as_date(rep(1:5,3)),   val=c(     100, 110, 120, 130, 140,     101, 111, 121, 131, 141,     102, 112, 122, 132, 142   ) ) #>    sim       time val #> 1    1 1970-01-02 100 #> 2    1 1970-01-03 110 #> 3    1 1970-01-04 120 #> 4    1 1970-01-05 130 #> 5    1 1970-01-06 140 #> 6    2 1970-01-02 101 #> 7    2 1970-01-03 111 #> 8    2 1970-01-04 121 #> 9    2 1970-01-05 131 #> 10   2 1970-01-06 141 #> 11   3 1970-01-02 102 #> 12   3 1970-01-03 112 #> 13   3 1970-01-04 122 #> 14   3 1970-01-05 132 #> 15   3 1970-01-06 142"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"summarized-forecast-data","dir":"Articles","previous_headings":"Create a forecast object > Forecast input as data frames","what":"Summarized forecast data","title":"Evaluate time series forecasts with casteval","text":"Summarized forecast data may stored following columns: Quantile columns must start val_q followed number 0 100, e.g., val_50 50th quantile, .e., median mean column must named val_mean Note summarized data never contains sim column. forecast data columns (val, val_*) well sim column must numeric.","code":"# summarized forecast data with the 25th, 50th, and 75th percentiles data.frame(   time=lubridate::as_datetime(1:5),   val_q25=c(100,105,103,104,105),   val_q50=c(201, 210, 205, 201, 200),   val_q75=c(304, 305, 303, 303, 302) ) #>                  time val_q25 val_q50 val_q75 #> 1 1970-01-01 00:00:01     100     201     304 #> 2 1970-01-01 00:00:02     105     210     305 #> 3 1970-01-01 00:00:03     103     205     303 #> 4 1970-01-01 00:00:04     104     201     303 #> 5 1970-01-01 00:00:05     105     200     302 # summarized forecast data with the mean, and the 2.5th and 97.5th percentiles data.frame(   time=1:5,   val_q2.5=c(100,103,104,105,102),   val_mean=c(150,155,160,155,154),   val_97.5=c(200,200,2204,205,206) ) #>   time val_q2.5 val_mean val_97.5 #> 1    1      100      150      200 #> 2    2      103      155      200 #> 3    3      104      160     2204 #> 4    4      105      155      205 #> 5    5      102      154      206"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"forecast-list","dir":"Articles","previous_headings":"Create a forecast object","what":"Forecast input as lists","title":"Evaluate time series forecasts with casteval","text":"Forecast data frames straightforward representations forecasts, though innefficient raw forecast data time column gets repeated realization. particularly long forecasts /many realizations, forecast data frames can quickly grow large, can slow work . Instead, may wish represent forecast list. casteval accepts raw forecast data named list following entries: time: single vector times numbers, dates, date-times vals: list numeric vectors containing forecasted values, one per realization, vector length time Since individual realizations can inferred casting, need provide additional information identify individual realizations (sim column ) order enable related downstream features.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"forecast-object","dir":"Articles","previous_headings":"Create a forecast object","what":"create_forecast()","title":"Evaluate time series forecasts with casteval","text":"Forecast objects created create_forecast(). first argument dat, forecast data one formats described . create_forecast() accepts forecast metadata additional, optional arguments: name: label forecast. Plotting functions use name title plots produce. forecast_time: time forecast period begins dat1. forecast_time format must match times time entry dat, can used scoring functions compute scores times relative forecast_time. create_forecast() returns forecast object, list following fields: data: forecast data frame name: name forecast, provided forecast_time: forecast made, provided list created hand, without help create_forecast(), recommend latter approach create_forecast() validates inputs avoid issues downstream. example, checks : forecast_time’s type consistent data quantile values logically possible (e.g., median values can’t smaller 25th quantiles) conflicting rows (e.g., can’t two rows time reporting different means)","code":"# forecast data with 4 time points and an ensemble of 3 simulations dat1 <- list(   time=1:4,   vals=list(     c(100, 102, 110, 108),     c(200, 195, 197, 196),     c(300, 301, 300, 302)   ) )  fc1 <- create_forecast(dat1, name=\"forecast 1\", forecast_time=3)  # the same data but formatted as a forecast data frame dat2 <- data.frame(   time=rep(1:4, each=3),   sim=rep(1:3, times=4),   val=c(100, 200, 300, 102, 195, 301, 110, 197, 300, 108, 196, 302) )  fc2 <- create_forecast(dat2, name=\"forecast 2\", forecast_time=3)  print(fc1) #> $name #> [1] \"forecast 1\" #>  #> $forecast_time #> [1] 3 #>  #> $data #>    time sim val #> 1     1   1 100 #> 2     2   1 102 #> 3     3   1 110 #> 4     4   1 108 #> 5     1   2 200 #> 6     2   2 195 #> 7     3   2 197 #> 8     4   2 196 #> 9     1   3 300 #> 10    2   3 301 #> 11    3   3 300 #> 12    4   3 302 # aside from the order of rows, the resulting forecast data frames are identical waldo::compare(dplyr::arrange(fc1$data, time), fc2$data) #> ✔ No differences # mean-and-quantiles forecast data dat3 <- data.frame(   time=1:5,   val_q2.5=c(100,103,104,105,102),   val_mean=c(150,155,160,155,154),   val_q97.5=c(200,200,2204,205,206) )  # note how we omit `forecast_time` fc3 <- create_forecast(   dat3,   name=\"forecast 3\" )  print(fc3) #> $name #> [1] \"forecast 3\" #>  #> $forecast_time #> NULL #>  #> $data #>   time val_q2.5 val_mean val_q97.5 #> 1    1      100      150       200 #> 2    2      103      155       200 #> 3    3      104      160      2204 #> 4    4      105      155       205 #> 5    5      102      154       206 # a forecast object with no optional metadata list(   data=data.frame(     time=1:5,     val=6:10   ),   name=NULL,   forecast_time=NULL ) #> $data #>   time val #> 1    1   6 #> 2    2   7 #> 3    3   8 #> 4    4   9 #> 5    5  10 #>  #> $name #> NULL #>  #> $forecast_time #> NULL # a forecast object with metadata list(   data=data.frame(     time=lubridate::as_date(1:5),     val=6:10   ),   name=\"A forecast\",   forecast_time=lubridate::as_date(3) ) #> $data #>         time val #> 1 1970-01-02   6 #> 2 1970-01-03   7 #> 3 1970-01-04   8 #> 4 1970-01-05   9 #> 5 1970-01-06  10 #>  #> $name #> [1] \"A forecast\" #>  #> $forecast_time #> [1] \"1970-01-04\""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"score-a-forecast","dir":"Articles","previous_headings":"","what":"Score a forecast","title":"Evaluate time series forecasts with casteval","text":"Forecasts scored observations, must passed casteval specific format.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"observations-data-frame","dir":"Articles","previous_headings":"Score a forecast","what":"Observations data frames","title":"Evaluate time series forecasts with casteval","text":"Observations passed casteval data frame time column val_obs column. Similar forecast data frames, time may either numeric, dates, date-times. val_obs must numeric.","code":"# An observations data frame data.frame(   time=1:5,   val_obs=c(50,60,55,57,59) ) #>   time val_obs #> 1    1      50 #> 2    2      60 #> 3    3      55 #> 4    4      57 #> 5    5      59"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"scoring-functions","dir":"Articles","previous_headings":"Score a forecast","what":"Scoring functions","title":"Evaluate time series forecasts with casteval","text":"score forecast using score(), following parameters: fcsts either forecast object list forecast objects obs observations data frame fun scoring function ... additional parameters passed fun Scoring functions can passed score() include: accuracy(), calculates success rate forecast’s quantile range predictions crps(), calculates Continuous Ranked Probability Score (CRPS) forecast log_score(), calculates (positive) logarithmic score forecast bias(), calculates much forecast overpredicts/underpredicts values score() scores every forecast passed obs, returns score one.2 examples scoring. detailed explanation scoring works, see scoring vignette","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"visualize-forecast-evaluation","dir":"Articles","previous_headings":"","what":"Visualize forecast evaluation","title":"Evaluate time series forecasts with casteval","text":"casteval provides plotting functions allow visualize forecasts, observations, sometimes scores. Several modular functions (plot_ensemble(), plot_observations(), etc.) implement individual plotting functionality, user-friendly plot_forecast() combines . describe functions .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"plot-a-forecast","dir":"Articles","previous_headings":"Visualize forecast evaluation","what":"Plot a forecast","title":"Evaluate time series forecasts with casteval","text":"plot_forecast() plots forecast optionally overlays observations quantile intervals, scores forecast, color-codes observations based score. raw forecast data, quant_intervals parameter like quant_pairs parameter accuracy(), used draw quantile intervals plot.3 val_q50 present forecast data, median plotted. Similarly, val_mean present, mean plotted.   summarized forecast data, val_q50 present forecast data, median plotted. Similarly, val_mean present, mean plotted.","code":"# Create a forecast fc <- create_forecast(list(   time=1:10,   vals=list(     c(1,2,3,5,4,5,4,6,6,5),     c(1,3,5,4,6,5,7,9,8,8),     c(1,4,3,4,5,6,5,3,2,2),     c(1,2,4,5,7,8,7,9,10,9)   )   ),   name = \"Forecast date: 2024-07-30\" )  # Plot it plot_forecast(fc) # Plot it and display 3 quantile intervals plot_forecast(fc, quant_intervals=list(c(25,75), c(2.5,97.5), c(5,95))) # Create a forecast with mean and median data fc2 <- create_forecast(data.frame(   time=1:5,   val_mean=6:10,   val_q50=c(5.5,6,7.5,9,10) ))  # Plot it plot_forecast(fc2)"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"plot-observations-with-scores","dir":"Articles","previous_headings":"Visualize forecast evaluation > Plot a forecast","what":"Plot observations with scores","title":"Evaluate time series forecasts with casteval","text":"plot_forecast() given observations scoring function, can additionally compute scores internally. Just pass scoring function score argument plot_forecast() run score(fcst, obs, summarize=FALSE) order plot forecast observations colour-coded scores.   can pass additional arguments score ellipsis parameter plot_forecast(). example, can specify quantile pairs accuracy() using method.  invert_scale parameter allows invert color scale observations. example, Continuous Ranked Probability Score, lower score better.","code":"# Create some observations obs <- data.frame(time=1:10, val_obs=c(1,4,8,10,11,8,5,3,3,2))  # Plot them over the forecast and its quantile intervals plot_forecast(fc, obs=obs, quant_intervals=list(c(25,75), c(2.5,97.5), c(5,95))) # Colour code points using `log_score()` # `plot_forecast()` automatically passes `summarize=FALSE` to # scoring functions in order to obtain the score for each day plot_forecast(fc, obs=obs, score=log_score, quant_intervals = c(2.5, 97.5)) # Identify the observations inside the 5%-95% quantile interval quant <- c(5,95) pp <- plot_forecast(fc, obs=obs, quant_intervals=list(c(25,75), c(2.5,97.5), c(5,95)), score=accuracy, quant_pairs=quant) #> Scoring accuracy using quantile pairs c(5, 95) pp # don't invert the scale (default behaviour) plot_forecast(fc, obs, score=crps, invert_scale=FALSE) # invert the scale plot_forecast(fc, obs, score=crps, invert_scale=TRUE)"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"customize-the-output","dir":"Articles","previous_headings":"Visualize forecast evaluation > Plot a forecast","what":"Customize the output","title":"Evaluate time series forecasts with casteval","text":"Since plot_forecast() returns ggplot2::ggplot object, can customize plot suit application:","code":"(pp   + ggplot2::labs(     x = \"Days from forecast\",     y = \"Hospital admissions\",     colour = glue::glue(\"Observation predicted\\nin {quant[1]}%-{quant[2]}% interval?\"),     fill = \"Quantile interval\"     )   + ggplot2::scale_colour_discrete(labels=c(`FALSE`=\"No\", `TRUE`=\"Yes\"))   + ggplot2::theme_classic(base_size=14) )"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/casteval.html","id":"atomic-plotting-functions","dir":"Articles","previous_headings":"Visualize forecast evaluation","what":"Atomic plotting functions","title":"Evaluate time series forecasts with casteval","text":"Behind scenes, plot_forecast() weaves together outputs several helper functions plot different aspects forecast. want control visualization process, can use functions directly. follows: plot_ensemble()4 plots ensemble forecast realizations5 plot_observations() plots set observations. observations contain score column, scores used colour-code observations plot_quantiles() plots specified quantiles forecast (quantiles can also inferred forecast’s data columns). plot_mean() plots mean forecast data plot_quant_intervals() uses ggplot2::geom_ribbon() plot bands quantile intervals plot_obs_score() wrapper plot_observations() allows pass scoring function, scoring parameters, forecast scored functions consume ggplot2::ggplot object first parameter, return ggplot2::ggplot object well. makes possible compose functions order using pipe produce plot want.","code":"(plot_ensemble(fcst = fc)    |> plot_quant_intervals(fc, c(25,75))    |> plot_mean(fc)    |> plot_obs_score(fc, obs, score=accuracy, quant_pairs=c(25,75)) ) #> Scoring accuracy using quantile pairs c(25, 75)"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"design-goals","dir":"Articles","previous_headings":"","what":"Design goals","title":"For developers","text":"strive design casteval robust, flexible, modular.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"robustness","dir":"Articles","previous_headings":"Design goals","what":"Robustness","title":"For developers","text":"casteval shouldn’t break easily, build lot input validation try give informative error messages/warnings.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"flexibility","dir":"Articles","previous_headings":"Design goals","what":"Flexibility","title":"For developers","text":"casteval accept variety inputs easily function variety realistic use cases. user lot wrangling data/parameters get software work . example: accuracy()’s quant_pairs argument can accept either NULL, pair quantiles, list pairs quantiles, handles inputs reasonable fashion. plot_forecast() requires forecast input, can additionally accept observations, quantile intervals, scoring function, depending user seeks accomplish.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"modularity","dir":"Articles","previous_headings":"Design goals","what":"Modularity","title":"For developers","text":"easy combine, swap , customize casteval’s outputs. example: User-defined scoring functions compatible existing plotting functions, long follow syntax return format. plot_*() functions (e.g., plot_ensemble(), plot_observations()) can chained together via pipe operator |>, enables user customize order plot layers easily (compared simply using plot_forecast()).","code":""},{"path":[]},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"renv","dir":"Articles","previous_headings":"Setup","what":"renv","title":"For developers","text":"project uses renv manage dependencies. R package projects, renv tries intelligently discover dependencies looking fields DESCRIPTION file relevant users, like Imports Depends (see renv::settings$package.dependency.fields()). developers, Suggests field can equally important track can include packages used process development actual source code package, like devtools, covr, ensure development environments don’t vary across users. renv FAQ page recommends tracking development dependencies Suggests. doesn’t, however, seem tell order use recommendation, need use dev = TRUE flag renv::status() accurately check status project, well renv::snapshot() recording files (default dev = FALSE). simply execute renv::snapshot(dev = FALSE), renv miss/remove development dependencies Suggests, break CI pipelines. dependencies recorded, renv::status(dev = FALSE) report project --sync, see installed dependencies used anywhere (since skips Suggests). bottom line sure use dev = TRUE option working repository. need add development dependencies project, sure add Suggests field DESCRIPTION, run renv::install(dev = TRUE) install , renv::snapshot(dev = TRUE) record . side effect default behaviour , open new R session project, renv::status() get called report project --sync. Don’t trust message! Run renv::status(dev = TRUE) check true status project. (feature request enable user configure default behaviour renv::status() project--project basis specifically accommodate situation, issue still open writing 2024-08-26…)","code":""},{"path":[]},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"git","dir":"Articles","previous_headings":"Workflow","what":"git","title":"For developers","text":"two important branches repository: main dev. intend main branch users install , well-test free work--progress code. dev main development branch acts staging area new changes going main: developer start new features bug fixes branching dev, succinct branch name describes branch’s use (e.g., plot-grouped-forecasts). work complete feature- issue-specific branch, develop create pull request dev. package maintainer decide next release version package (following semantic versioning paradigm) accept pull request(s) /part release dev. package maintainer pull main dev sync resolve merge conflicts. package maintainer create branch dev called vx.y.z, x.y.z desired version number update version number DESCRIPTION well. last commit tagged version number. package maintainer finish creating accepting pull request version-specific branch main creating release (change major minor version number).","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"documentation","dir":"Articles","previous_headings":"Workflow","what":"Documentation","title":"For developers","text":"Developers can use pkgdown::build_site() preview entire package website based current state package documentation. also useful use commands pkgdown::build_reference() pkgdown::build_articles() preview just Reference (function documentation) Articles pages, respectively. However, latter case least, pkgdown use currently installed version package, current source version, may want run devtools::install() first ’re working part article depends latest version casteval code. results appear public/, local previews pushed remote repository (.gitignore already). rebuild deploy package website automatically GitHub Actions whenever changes pushed main.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"readme","dir":"Articles","previous_headings":"Workflow > Documentation","what":"README","title":"For developers","text":"README.md used README GitHub well landing page package website. source README.Rmd; updates README content made .Rmd README.md regenerated devtools::build_readme(). (Alternatively, create GitHub Action build README deploying website…)","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"testing","dir":"Articles","previous_headings":"Workflow","what":"Testing","title":"For developers","text":"use testthat unit tests vdiffr (particular, vdiffr::expect_doppelganger()) tests involving plots outputs. vdiffr sometimes deletes test snapshots tests fail, great (might able avoid putting expect_doppelganger() separate test_that() block, although sounds tedious).","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/dev.html","id":"before-release","dir":"Articles","previous_headings":"Workflow","what":"Before release","title":"For developers","text":"use devtools::check(), renv::status(dev=TRUE), covr::report() verify package good state, especially releasing new version. devtools::check() checks package can installed, unit tests pass, renv::status(dev=TRUE) checks virtual environment used development consistent state covr::report() reports current test coverage package (note known issue covr vdiffr)","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"summarize-flag","dir":"Articles","previous_headings":"","what":"The summarize flag","title":"Scoring forecasts","text":"Many scoring functions calculate intermediate scores time point, select/combine scores order return single value. functions accept optional summarize parameter, boolean. summarize TRUE (default), scoring function usually return score single number1. summarize FALSE, scoring function return data frame time, obs, score columns, containing observations scores calculated time point scored. type score column necessarily numeric (example, accuracy(), logical).","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"scoring-functions","dir":"Articles","previous_headings":"","what":"Scoring functions","title":"Scoring forecasts","text":"describe behaviour builtin scoring functions. See function documentation details.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"accuracy-score","dir":"Articles","previous_headings":"Scoring functions","what":"Accuracy score","title":"Scoring forecasts","text":"accuracy() calculates proportion observations fall inside quantile interval forecast data. forecast contains summarized forecast data, accuracy calculated using provided quantiles. forecast contains raw forecast data, can use quant_pairs parameter specify pair quantiles (e.g., c(2.5, 97.5)) list pairs quantiles (e.g., list(c(2.5, 97.5), c(10, 90))) calculate accuracy. list pairs quantiles provided, separate score calculated pair. summarize TRUE, score(s) returned vector numbers 0 1, one score per quantile pair. summarize FALSE, accuracy score provided observation (boolean). one pair quantiles requested, returned data frame contain additional column named pair, indicate quantile pair score corresponds .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"examples","dir":"Articles","previous_headings":"Scoring functions > Accuracy score","what":"Examples","title":"Scoring forecasts","text":"","code":"# A forecast with raw data fc1 <- create_forecast(data.frame(   time=rep(1:5, each=11),   val=rep(0:10, 5) ))  # A forecast with quantile data fc2 <- create_forecast(dplyr::tibble(   time=1:5,   val_q5=c(0.5,0.5,0.5,0.5,0.5),   val_q10=c(1,1,1,1,1),   val_q25=c(2.5,2.5,2.5,2.5,2.5),   val_q75=c(7.5,7.5,7.5,7.5,7.5),   val_q90=c(9,9,9,9,9),   val_q95=c(9.5,9.5,9.5,9.5,9.5) ))  # Another forecast with quantile data fc3 <- create_forecast(data.frame(     time=1:5,     val_q2.5=c(6,6,6,6,6),     val_q97.5=c(10,10,10,10,10) ))  obs <- data.frame(time=1:5, val_obs=c(0, 2.4, 5, 9.5, 10))  # Calculate accuracy from raw data accuracy(fc1, obs, quant_pairs=c(25, 75)) #> Scoring accuracy using quantile pairs c(25, 75) #> Used 5 time points to calculate accuracy #> [1] 0.2 # Calculate the accuracy for every quantile pair present accuracy(fc2, obs) #> Scoring accuracy using quantile pairs c(5, 95), c(10, 90), c(25, 75) #> Used 5 time points to calculate accuracy #> [1] 0.6 0.4 0.2 # Calculate the accuracy for a subset of quantile pairs accuracy(fc2, obs, quant_pairs=list(c(5,95), c(25,75))) #> Scoring accuracy using quantile pairs c(5, 95), c(25, 75) #> Used 5 time points to calculate accuracy #> [1] 0.6 0.2 # Calculate accuracy for only one quantile pair accuracy(fc2, obs, quant_pairs=c(5, 95)) #> Scoring accuracy using quantile pairs c(5, 95) #> Used 5 time points to calculate accuracy #> [1] 0.6 # If `forecast_time` is NULL, every time point in the forecast will be scored accuracy(fc3, obs) #> Scoring accuracy using quantile pairs c(2.5, 97.5) #> Used 5 time points to calculate accuracy #> [1] 0.4 # Otherwise, everything prior to `forecast_time` will be ignored fc3$forecast_time <- 3 accuracy(fc3, obs) #> Scoring accuracy using quantile pairs c(2.5, 97.5) #> Used 3 time points to calculate accuracy #> [1] 0.6666667 # We can see what is happening behind the scenes by passing `summarize=FALSE` df <- accuracy(fc3, obs, summarize=FALSE) #> Scoring accuracy using quantile pairs c(2.5, 97.5) df #>   time val_obs score pair #> 1    3     5.0 FALSE    1 #> 2    4     9.5  TRUE    1 #> 3    5    10.0  TRUE    1 mean(df$score) #> [1] 0.6666667 # `pair` column maps rows to quantile pairs accuracy(fc2, obs, summarize=FALSE) #> Scoring accuracy using quantile pairs c(5, 95), c(10, 90), c(25, 75) #>    time val_obs score pair #> 1     1     0.0 FALSE    1 #> 2     2     2.4  TRUE    1 #> 3     3     5.0  TRUE    1 #> 4     4     9.5  TRUE    1 #> 5     5    10.0 FALSE    1 #> 6     1     0.0 FALSE    2 #> 7     2     2.4  TRUE    2 #> 8     3     5.0  TRUE    2 #> 9     4     9.5 FALSE    2 #> 10    5    10.0 FALSE    2 #> 11    1     0.0 FALSE    3 #> 12    2     2.4 FALSE    3 #> 13    3     5.0  TRUE    3 #> 14    4     9.5 FALSE    3 #> 15    5    10.0 FALSE    3"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"logarithmic-score","dir":"Articles","previous_headings":"Scoring functions","what":"Logarithmic score","title":"Scoring forecasts","text":"log_score() calculates (positive) log score forecast. uses Kernel Density Estimation (KDE) obtain probability distribution forecasted values point time forecast. f(x) estimated probability distribution x_0 corresponding observation, log score point time log(f(x_0)) (log() natural logarithm). forecast must contain raw data 2 values per time point. summarize TRUE, one score returned based either score time fcst$forecast_time + , depending whether provided. (one accepted time.) summarize FALSE, ignored, output data frame described , scores observation. KDE requires bandwidth order calculate forecast distribution observation time. bw provided, reasonable bandwidth automatically determined. Otherwise, value bw (must number greater 0) used. See ?log_score details.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"visualizing-the-kde","dir":"Articles","previous_headings":"Scoring functions > Logarithmic score","what":"Visualizing the KDE","title":"Scoring forecasts","text":"evaluating forecasts using log_score() may want inspect inspect KDE confidence check, especially forecast data sparse. may also want see setting bw parameter affects resulting distribution, whether automatically calculated bandwidth acceptable. plot_KDE() allows . Like log_score(), accepts parameters fcst, obs (now optional), , , bw. also accepts optional parameters , , n, binwidth (confused bandwidth). See ?plot_KDE detailed explanation extra parameters. plot_KDE() plot following elements: data points fcst /obs time point specified histogram showing distribution fcst’s data points (specified ), normalized integrate 1 order comparable probability density density curve calculated KDE","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"examples-1","dir":"Articles","previous_headings":"Scoring functions > Logarithmic score","what":"Examples","title":"Scoring forecasts","text":"","code":"# generated using `rnorm(20) + 10` d <- c(10.609344, 10.383797, 11.102006, 10.232616, 11.372632, 11.489963, 10.359282, 10.303749,   7.477219,  9.612921,  8.568241, 11.467244,  9.979756, 10.226105, 9.592584,  9.582751,  8.674618,   8.706757,  9.810594, 10.752879)  fcst <- create_forecast(   data.frame(time=rep(1:5, each=20), val=rep(d,5)),   forecast_time=2 )  obs <- data.frame(time=1:5, val_obs=c(2, 7, 10, 11, 100))  # get the score at time 3 log_score(fcst, obs, at=3) #> [1] -0.9654438 # get the score at time `fcst$forecast_time + 2` (4) log_score(fcst, obs, after=2) #> [1] -1.319126 # get all the scores as part of a data frame log_score(fcst, obs, summarize=FALSE) #> # A tibble: 4 × 3 #>    time val_obs    score #>   <int>   <dbl>    <dbl> #> 1     2       7   -3.67  #> 2     3      10   -0.965 #> 3     4      11   -1.32  #> 4     5     100 -Inf # check the KDE at time 4 with default binwidth # the observation point shows up as a vertical line plot_KDE(fcst, obs, at=4) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # check the KDE at time 4 with a too-low binwidth (making the resulting distribution very jagged) plot_KDE(fcst, obs, at=4, bw=0.2) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # check the KDE at time 4 with a too-high binwidth (resulting in an underconfident distribution) plot_KDE(fcst, obs, at=4, bw=2) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"crps","dir":"Articles","previous_headings":"Scoring functions","what":"Continuous Ranked Probability Score (CRPS)","title":"Scoring forecasts","text":"crps() Continuous Ranked Probability Score. similar log_score() can performed raw forecast data, since requires distribution predicted observations fixed time. However, works using cumulative distribution function predicted observations time (probability density function), rely kernel density estimation. also penalizes inaccurate forecasts less harshly log_score().","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"examples-2","dir":"Articles","previous_headings":"Scoring functions > Continuous Ranked Probability Score (CRPS)","what":"Examples","title":"Scoring forecasts","text":"","code":"set.seed(42) dat <- rnorm(20) + 10  fc <- create_forecast(data.frame(time=rep(1,20), val=dat)) obs1 <- data.frame(time=1, val_obs=10) obs2 <- data.frame(time=1, val_obs=100)  # the closer the score is to 0, the better crps(fc, obs1, at=1) #> [1] 0.2897223 # note how inaccuracies are not penalized as harshly as with `log_score()` crps(fc, obs2, at=1) #> [1] 89.10485"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"bias","dir":"Articles","previous_headings":"Scoring functions","what":"Bias","title":"Scoring forecasts","text":"bias() calculates much forecast overpredicts underpredicts observed value, returns result number -1 1, -1 means observations underpredicted 1 means observations overpredicted. bias() looks three kinds forecast data: raw data (val) mean data (val_mean) median data (val_q50) uses first can find calculate bias.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"examples-3","dir":"Articles","previous_headings":"Scoring functions > Bias","what":"Examples","title":"Scoring forecasts","text":"","code":"obs <- data.frame(time=1:5, val_obs=rep(10,5))  # this forecast  fc1 <- create_forecast(dplyr::tibble(   time=c(1,1,2,2,3,3,4,4,5,5),   val=c(9, 9, 9, 10, 10, 10, 10, 11, 11, 11) ))  bias(fc1, obs, summarize=FALSE) #> # A tibble: 5 × 3 #>    time val_obs score #>   <dbl>   <dbl> <dbl> #> 1     1      10  -1   #> 2     2      10  -0.5 #> 3     3      10   0   #> 4     4      10   0.5 #> 5     5      10   1 fc2 <- create_forecast(data.frame(     time=c(1,1,1,2,2,2,3,3,3),     val=c(9,9,9,10,10,10,11,9,9) ))  bias(fc2, obs) #> [1] -0.4444444 fc3 <- create_forecast(data.frame(time=1:3, val_mean=c(12,12,10))) bias(fc3, obs) #> [1] 0.6666667 fc4 <- create_forecast(data.frame(time=1:3, val_q50=c(0,0,0))) bias(fc4, obs) #> [1] -1"},{"path":"https://phac-nml-phrsd.github.io/casteval/articles/scoring.html","id":"defining-your-own-scoring-functions","dir":"Articles","previous_headings":"","what":"Defining your own scoring functions","title":"Scoring forecasts","text":"can define scoring functions use just casteval’s built-scoring functions. Like functions described , accept forecast object fcst, observations data frame obs, possibly additional arguments. scoring function returns score observation (way summarize=FALSE functions ), plotting functions can readily use added information visualizing forecast scores (discussed ).","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Yu. Author. Irena Papst. Author, maintainer. Government Canada. Copyright holder.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yu D, Papst (2024). casteval: Modular tools scoring comparing infectious disease forecasts. R package version 0.2.0.1, https://phac-nml-phrsd.github.io/casteval/, https://phac-nml-phrsd.github.io/casteval.","code":"@Manual{,   title = {casteval: Modular tools for scoring and comparing infectious disease forecasts},   author = {Daniel Yu and Irena Papst},   year = {2024},   note = {R package version 0.2.0.1, https://phac-nml-phrsd.github.io/casteval/},   url = {https://phac-nml-phrsd.github.io/casteval}, }"},{"path":[]},{"path":"https://phac-nml-phrsd.github.io/casteval/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Modular tools for scoring and comparing infectious disease forecasts","text":"casteval facilitates evaluation time series forecasts. ✅ Flexibly accepts forecasts either set individual model realizations summary ensemble realizations via quantiles time point ✅ Includes multiple scoring methods ✅ Provides suite visualization tools help assess forecast scoring performance","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modular tools for scoring and comparing infectious disease forecasts","text":"simplest way install casteval use remotes package: wish install remotes package, trouble using , can simply clone repository locally use:","code":"# install.packages(\"remotes\") remotes::install_github(\"phac-nml-phrsd/casteval\") install.packages(\"your/path/to/casteval\", type=\"source\")"},{"path":"https://phac-nml-phrsd.github.io/casteval/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Modular tools for scoring and comparing infectious disease forecasts","text":"Use Get started guide start using package.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/index.html","id":"for-developers","dir":"","previous_headings":"","what":"For developers","title":"Modular tools for scoring and comparing infectious disease forecasts","text":"Please review developer guide plan contributing package.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get accuracy from quantiles — accuracy","title":"Get accuracy from quantiles — accuracy","text":"Given forecast set observations, compute accuracy (# inside quantile interval / # total) forecast. Raw data /provided quantiles used compute quantile interval.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get accuracy from quantiles — accuracy","text":"","code":"accuracy(fcst, obs, summarize = TRUE, quant_pairs = NULL)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get accuracy from quantiles — accuracy","text":"fcst forecast object (see output create_forecast()). obs observations data frame. summarize boolean, defaults TRUE. TRUE, single number returned score forecast. FALSE, data frame columns named time, val_obs, score returned, containing scores individual time point. can used plotting functions colour-code observations, example. quant_pairs (Optional) list pairs numbers 0 100, single pair numbers 0 100. provided, score corresponding pairs quantiles calculated. provided, default every symmetrical pair quantiles can found fcst, ordered widest narrowest (e.x. 25% 75% quantiles symmetrical). summarize FALSE, additional column named pair indicate pair quantiles row represents. summarize TRUE, output vector length quant_pairs, containing respective score pair.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get accuracy from quantiles — accuracy","text":"number 0 1, rate observations inside specified quantile interval","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get accuracy from quantiles — accuracy","text":"","code":"# forecast with raw data fc1 <- create_forecast(dplyr::tibble(time=c(1,1,1,2,2,2,3,3,3), val=4:12)) obs1 <- data.frame(time=1:3, val_obs=c(5, 7.4, 11.6))  # calculate quantiles and accuracy from raw data # returns 2/3 accuracy(fc1, obs1, quant_pairs=list(c(25, 75))) #> Scoring accuracy using quantile pairs c(25, 75) #> Used 3 time points to calculate accuracy #> [1] 0.3333333  # forecast with quantile data fc2 <- create_forecast(dplyr::tibble(   time=1:3, val_q5=1:3, val_q25=4:6, val_q50=100:102, val_q75=200:202, val_q95=203:205 )) obs2 <- data.frame(time=1:3, val_obs=c(4, 202, 1000))  # infer quantile pairs from forecast data (`c(5,95)` and `c(25, 75)`) # returns c(2/3, 1/3) accuracy(fc2, obs2) #> Scoring accuracy using quantile pairs c(5, 95), c(25, 75) #> Used 3 time points to calculate accuracy #> [1] 0.6666667 0.3333333  # return a data frame with a `time`, `pair`, `val_obs`, and `score` columns accuracy(fc2, obs2, summarize=FALSE) #> Scoring accuracy using quantile pairs c(5, 95), c(25, 75) #>   time val_obs score pair #> 1    1       4  TRUE    1 #> 2    2     202  TRUE    1 #> 3    3    1000 FALSE    1 #> 4    1       4  TRUE    2 #> 5    2     202 FALSE    2 #> 6    3    1000 FALSE    2"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy_help.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate accuracy given a single quantile pair — accuracy_help","title":"Calculate accuracy given a single quantile pair — accuracy_help","text":"Helper accuracy(). Calculates accuracy single quantile pair returns unsummarized result.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate accuracy given a single quantile pair — accuracy_help","text":"","code":"accuracy_help(fcst, obs, pair)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate accuracy given a single quantile pair — accuracy_help","text":"fcst forecast object. obs observations data frame. pair valid quantile pair","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy_help.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate accuracy given a single quantile pair — accuracy_help","text":"data frame time, val_obs, score columns","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/accuracy_help.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate accuracy given a single quantile pair — accuracy_help","text":"","code":"# See `?accuracy`"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate forecast bias — bias","title":"Calculate forecast bias — bias","text":"Given forecast set observations, compute bias forecast's predictions. bias() looks forecast data following order: raw data (val) mean (val_mean) median (val_q50)","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate forecast bias — bias","text":"","code":"bias(fcst, obs, summarize = TRUE)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate forecast bias — bias","text":"fcst forecast object (see output create_forecast()). obs observations data frame. summarize boolean, defaults TRUE. TRUE, single number returned score forecast. FALSE, data frame columns named time, val_obs, score returned, containing scores individual time point. can used plotting functions colour-code observations, example.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate forecast bias — bias","text":"number -1 1, inclusive. -1 means 100% underprediction 1 means 100% overprediction.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/bias.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate forecast bias — bias","text":"uses first finds calculate bias, assigning 1 overprediction, 0 equality, -1 underprediction. summarizes score taking mean assigned values.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate forecast bias — bias","text":"","code":"obs <- data.frame(time=1:5, val_obs=rep(10,5))  # # a forecast with bias on individual days, but no overall bias fc1 <- create_forecast(dplyr::tibble(   time=c(1,1,2,2,3,3,4,4,5,5),   val=c(9, 9, 9, 10, 10, 10, 10, 11, 11, 11) ))  bias(fc1, obs, summarize=FALSE) #> # A tibble: 5 × 3 #>    time val_obs score #>   <dbl>   <dbl> <dbl> #> 1     1      10  -1   #> 2     2      10  -0.5 #> 3     3      10   0   #> 4     4      10   0.5 #> 5     5      10   1    bias(fc1, obs) #> [1] 0  # A forecast with an underprediction bias fc2 <- create_forecast(data.frame(   time=c(1,1,1,2,2,2,3,3,3),   val=c(9,9,9,10,10,10,11,9,9) ))  bias(fc2, obs, summarize=FALSE) #> # A tibble: 3 × 3 #>    time val_obs  score #>   <dbl>   <dbl>  <dbl> #> 1     1      10 -1     #> 2     2      10  0     #> 3     3      10 -0.333  bias(fc2, obs) #> [1] -0.4444444"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/calc_specified_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Calcuate relative/absolute time specified by user — calc_specified_time","title":"Calcuate relative/absolute time specified by user — calc_specified_time","text":"Calculate time according /params passed user. Helper log_score() plot_KDE().","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/calc_specified_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calcuate relative/absolute time specified by user — calc_specified_time","text":"","code":"calc_specified_time(fcst, at = NULL, after = NULL)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/calc_specified_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calcuate relative/absolute time specified by user — calc_specified_time","text":"fcst forecast object (see output create_forecast()). (Optional) See ?log_score (Optional) See ?log_score","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/calc_specified_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calcuate relative/absolute time specified by user — calc_specified_time","text":"time type fcst","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/calc_specified_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calcuate relative/absolute time specified by user — calc_specified_time","text":"","code":"fc <- create_forecast(data.frame(time=1:3, val=4:6), forecast_time=2) # 1 casteval:::calc_specified_time(fc, at=1) #> [1] 1  # 2+1=3 casteval:::calc_specified_time(fc, after=1) #> [1] 3"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/casteval-package.html","id":null,"dir":"Reference","previous_headings":"","what":"casteval: Modular tools for scoring and comparing infectious disease forecasts — casteval-package","title":"casteval: Modular tools for scoring and comparing infectious disease forecasts — casteval-package","text":"Provides generalized, modular set tools facilitate scoring comparing infectious disease forecasts.","code":""},{"path":[]},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/casteval-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"casteval: Modular tools for scoring and comparing infectious disease forecasts — casteval-package","text":"Maintainer: Daniel Yu daniel.yu@phac-aspc.gc.ca Authors: Irena Papst irena.papst@phac-aspc.gc.ca","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a forecast object — create_forecast","title":"Create a forecast object — create_forecast","text":"create_forecast() creates forecast object given data optional metadata. accepts variety forecast formats input intelligently converts standard format.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a forecast object — create_forecast","text":"","code":"create_forecast(dat, name = NULL, forecast_time = NULL)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a forecast object — create_forecast","text":"dat Forecast data. can one following formats: data frame containing forecast data named list time field (vector times) vals field (list realization vectors). vectors vals must length time first option , data frame contain: time column (Optional) sim column, containing simulation numbers raw data (Optional) val column, containing raw data. sim present val must present well. (Optional) columns starting val_q followed number 0 100, containing quantile data (Optional) val_mean column, containing mean data Times can either numeric, dates, date-times. data must numeric. sim must also numeric present. name (Optional) string specifying name forecast forecast_time (Optional) integer, date, date-time specifying forecast created. type match type values time column(s) data provided, forecast scored using data corresponding dates/times greater equal forecast_time. Additionally, plots forecast may graphically distinguish values left right forecast_time.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a forecast object — create_forecast","text":"named list fields data, name, forecast_time. data data frame containing forecast data. name forecast_time parameters passed create_forecast()","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a forecast object — create_forecast","text":"","code":"# forecast with numeric times and raw data create_forecast(data.frame(time=1:3, val=10:12), name=\"a forecast\", forecast_time=2) #> $name #> [1] \"a forecast\" #>  #> $forecast_time #> [1] 2 #>  #> $data #>   time val #> 1    1  10 #> 2    2  11 #> 3    3  12 #>   # forecast with dates and mean-and-quantiles data create_forecast(   data.frame(     time=c(lubridate::ymd(\"2024-01-01\"), lubridate::ymd(\"2024-01-02\")),     val_mean=10:11, val_q2.5=5:6, val_q97.5=15:16   ),   name=\"another forecast\" ) #> $name #> [1] \"another forecast\" #>  #> $forecast_time #> NULL #>  #> $data #>         time val_mean val_q2.5 val_q97.5 #> 1 2024-01-01       10        5        15 #> 2 2024-01-02       11        6        16 #>   # an already-combined ensemble create_forecast(dplyr::tibble(time=c(1,1,1,1,1,2,2,2,2,2), val=c(20,21,22,23,24,10,11,12,13,14))) #> $name #> NULL #>  #> $forecast_time #> NULL #>  #> $data #> # A tibble: 10 × 2 #>     time   val #>    <dbl> <dbl> #>  1     1    20 #>  2     1    21 #>  3     1    22 #>  4     1    23 #>  5     1    24 #>  6     2    10 #>  7     2    11 #>  8     2    12 #>  9     2    13 #> 10     2    14 #>   # an already-combined ensemble with simulation numbers create_forecast(dplyr::tibble(   time=c(1,1,1,1,1,2,2,2,2,2),   sim=c(1,2,3,4,5,1,2,3,4,5),   val=c(20,21,22,23,24,10,11,12,13,14) )) #> $name #> NULL #>  #> $forecast_time #> NULL #>  #> $data #> # A tibble: 10 × 3 #>     time   sim   val #>    <dbl> <dbl> <dbl> #>  1     1     1    20 #>  2     1     2    21 #>  3     1     3    22 #>  4     1     4    23 #>  5     1     5    24 #>  6     2     1    10 #>  7     2     2    11 #>  8     2     3    12 #>  9     2     4    13 #> 10     2     5    14 #>   # an ensemble of 4 realizations, each represented by a vector in `vals` create_forecast(list(   time=1:3,   vals=list(4:6, 7:9, 10:12, 13:15) )) #> $name #> NULL #>  #> $forecast_time #> NULL #>  #> $data #>    time sim val #> 1     1   1   4 #> 2     2   1   5 #> 3     3   1   6 #> 4     1   2   7 #> 5     2   2   8 #> 6     3   2   9 #> 7     1   3  10 #> 8     2   3  11 #> 9     3   3  12 #> 10    1   4  13 #> 11    2   4  14 #> 12    3   4  15 #>"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast_ensemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Create forecast from time vector and ensemble of realizations — create_forecast_ensemble","title":"Create forecast from time vector and ensemble of realizations — create_forecast_ensemble","text":"Helper create_forecast().","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast_ensemble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create forecast from time vector and ensemble of realizations — create_forecast_ensemble","text":"","code":"create_forecast_ensemble(time, vals)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast_ensemble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create forecast from time vector and ensemble of realizations — create_forecast_ensemble","text":"time vector times vals list vectors values. vector corresponds realization assigned simulation number.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast_ensemble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create forecast from time vector and ensemble of realizations — create_forecast_ensemble","text":"forecast data frame","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/create_forecast_ensemble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create forecast from time vector and ensemble of realizations — create_forecast_ensemble","text":"","code":"# See `?create_forecast`"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/crps.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Continuous Ranked Probability Score for forecast — crps","title":"Compute Continuous Ranked Probability Score for forecast — crps","text":"Given forecast set observations, compute ","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/crps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Continuous Ranked Probability Score for forecast — crps","text":"","code":"crps(fcst, obs, at = NULL, after = NULL, summarize = TRUE)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/crps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Continuous Ranked Probability Score for forecast — crps","text":"fcst forecast object (see output create_forecast()). obs observations data frame. (Optional) time (must compatible fcst obs). specified, score time point returned. Mutually exclusive . (Optional) number. specified, score time fcst$forecast_time + returned. Mutually exclusive . summarize boolean, defaults TRUE. TRUE, single number returned score forecast. FALSE, data frame columns named time, val_obs, score returned, containing scores individual time point. can used plotting functions colour-code observations, example.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/crps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Continuous Ranked Probability Score for forecast — crps","text":"summarize FALSE, data frame containing times, observations, scores. Otherwise, score time speficied either .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/crps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Continuous Ranked Probability Score for forecast — crps","text":"Continuous Ranked Probability Score (CRPS) every time point. CRPS given distribution f observation y, let F CDF f. CRPS integral square F(x) - H(x - y), H Heaviside function. CDF obtained using emperical distribution function forecast data.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/crps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Continuous Ranked Probability Score for forecast — crps","text":"","code":"fc <- create_forecast(list(   time=c(1,2,3),   vals=list(c(1,1,1), c(2,2,2), c(3,3,3), c(4,4,4), c(5,5,5)), forecast_time=1) )  crps(fc, data.frame(time=1:3, val_obs=c(3,4,5)), summarize=FALSE) #> # A tibble: 3 × 3 #>    time val_obs score #>   <dbl>   <dbl> <dbl> #> 1     1       3   0.4 #> 2     2       4   0.6 #> 3     3       5   1.2  crps(fc, data.frame(time=1:3, val_obs=c(3,4,5)), at=2) #> [1] 0.6"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020ens.html","id":null,"dir":"Reference","previous_headings":"","what":"Denmark 2020 COVID-19 forecast ensemble — denmark2020ens","title":"Denmark 2020 COVID-19 forecast ensemble — denmark2020ens","text":"data used create denmark2020fc, list realization vectors.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020ens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denmark 2020 COVID-19 forecast ensemble — denmark2020ens","text":"","code":"denmark2020ens"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020ens.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Denmark 2020 COVID-19 forecast ensemble — denmark2020ens","text":"object class list length 500.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020ens.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Denmark 2020 COVID-19 forecast ensemble — denmark2020ens","text":"https://www.nature.com/articles/s41567-020-01121-y https://github.com/jonassjuul/curvestat","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Denmark 2020 COVID-19 forecast data — denmark2020fc","title":"Denmark 2020 COVID-19 forecast data — denmark2020fc","text":"Forecast realizations Danish COVID-19 forecasting effort, concerning 5 May 1 October 2020.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denmark 2020 COVID-19 forecast data — denmark2020fc","text":"","code":"denmark2020fc"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020fc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Denmark 2020 COVID-19 forecast data — denmark2020fc","text":"object class list length 5.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020fc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Denmark 2020 COVID-19 forecast data — denmark2020fc","text":"https://www.nature.com/articles/s41567-020-01121-y https://github.com/jonassjuul/curvestat","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020fc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Denmark 2020 COVID-19 forecast data — denmark2020fc","text":"Formatted casteval forecast object. Acquired paper/repository.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Denmark 2020 COVID-19 observations — denmark2020obs","title":"Denmark 2020 COVID-19 observations — denmark2020obs","text":"Daily COVID-19 hospitalizations Denmark 55 days leading 5 May 2020 forecast (see ?denmark2020fc), source.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denmark 2020 COVID-19 observations — denmark2020obs","text":"","code":"denmark2020obs"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020obs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Denmark 2020 COVID-19 observations — denmark2020obs","text":"object class tbl_df (inherits tbl, data.frame) 55 rows 2 columns.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020obs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Denmark 2020 COVID-19 observations — denmark2020obs","text":"https://www.nature.com/articles/s41567-020-01121-y https://github.com/jonassjuul/curvestat","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/denmark2020obs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Denmark 2020 COVID-19 observations — denmark2020obs","text":"Formatted two-column data frame.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/filter_forecast_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Isolate projected values from fit values — filter_forecast_time","title":"Isolate projected values from fit values — filter_forecast_time","text":"Removes rows forecast data frame scored, .e. data generated dates/times prior forecast created.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/filter_forecast_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isolate projected values from fit values — filter_forecast_time","text":"","code":"filter_forecast_time(df, forecast_time)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/filter_forecast_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isolate projected values from fit values — filter_forecast_time","text":"df forecast data frame. See ?create_forecast details forecast_time Either NULL time type values dat$time. non-NULL, rows time prior forecast_time removed dat.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/filter_forecast_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isolate projected values from fit values — filter_forecast_time","text":"filtered data frame (change forecast_time NULL)","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/filter_forecast_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isolate projected values from fit values — filter_forecast_time","text":"","code":"# data.frame(time=5:10, val=15:20) casteval:::filter_forecast_time(data.frame(time=1:10, val=11:20), 5) #>   time val #> 1    5  15 #> 2    6  16 #> 3    7  17 #> 4    8  18 #> 5    9  19 #> 6   10  20  # unchanged casteval:::filter_forecast_time(data.frame(time=1:10, val=11:20), NULL) #>    time val #> 1     1  11 #> 2     2  12 #> 3     3  13 #> 4     4  14 #> 5     5  15 #> 6     6  16 #> 7     7  17 #> 8     8  18 #> 9     9  19 #> 10   10  20"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Get quantile column from data frame — get_quant_col","title":"Get quantile column from data frame — get_quant_col","text":"Given data frame quantile number, returns corresponding column data frame.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get quantile column from data frame — get_quant_col","text":"","code":"get_quant_col(df, num)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get quantile column from data frame — get_quant_col","text":"df data frame. contain \"val_q*\" column corresponding num num number 0 100 inclusive.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get quantile column from data frame — get_quant_col","text":"num quantile column df.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get quantile column from data frame — get_quant_col","text":"","code":"# returns 4:6 casteval:::get_quant_col(data.frame(time=1:3, val_q50=4:6), 50) #> [1] 4 5 6"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_percentages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get quantile numbers from column names — get_quant_percentages","title":"Get quantile numbers from column names — get_quant_percentages","text":"Given (forecast) data frame, inspects column names returns quantile numbers. function input validation.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_percentages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get quantile numbers from column names — get_quant_percentages","text":"","code":"get_quant_percentages(df)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_percentages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get quantile numbers from column names — get_quant_percentages","text":"df data frame, presumably containing columns named \"val_q\" followed number 0 100.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_percentages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get quantile numbers from column names — get_quant_percentages","text":"numeric vector containing quantiles, sorted increasing order.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quant_percentages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get quantile numbers from column names — get_quant_percentages","text":"","code":"# returns c(2.5, 50, 97.5) casteval:::get_quant_percentages(   data.frame(time=1:3, val_q2.5=4:6, val_q50=7:9, val_q97.5=10:12) ) #> [1]  2.5 50.0 97.5"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain quantiles from data frame — get_quantile","title":"Obtain quantiles from data frame — get_quantile","text":"Given forecast data frame, compute quantiles raw data existing quantile columns, depending present.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain quantiles from data frame — get_quantile","text":"","code":"get_quantile(df, perc)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain quantiles from data frame — get_quantile","text":"df forecast data frame. contain raw quantile data. perc percentage, 0 100.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain quantiles from data frame — get_quantile","text":"data frame time column quant column, containing requested quantile data","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain quantiles from data frame — get_quantile","text":"","code":"df1 <- data.frame(time=rep(1:3,each=3), sim=rep(1:3, 3), val=c(4:6, 7:9, 10:12)) df2 <- data.frame(time=1:3, val_q50=c(1000, 2000, 3000))  casteval:::get_quantile(df1, 50) #> # A tibble: 3 × 2 #>    time quant #>   <int> <dbl> #> 1     1     5 #> 2     2     8 #> 3     3    11 casteval:::get_quantile(df2, 50) #>   time quant #> 1    1  1000 #> 2    2  2000 #> 3    3  3000"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a row of a date frame for a given time — get_time_point","title":"Get a row of a date frame for a given time — get_time_point","text":"Given forecast/observations data frame time, isolate row given time.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a row of a date frame for a given time — get_time_point","text":"","code":"get_time_point(df, t)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a row of a date frame for a given time — get_time_point","text":"df data frame time column. t time.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a row of a date frame for a given time — get_time_point","text":"data frame one row, time equals t. Raises error exactly one row satisfies .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a row of a date frame for a given time — get_time_point","text":"","code":"# no rows with time==4 try(casteval:::get_time_point(data.frame(time=1:3,val=4:6), 4)) #> Error in casteval:::get_time_point(data.frame(time = 1:3, val = 4:6),  :  #>   no rows in data frame with given time  # 2 rows with time==2 try(casteval:::get_time_point(data.frame(time=c(1,2,2,3), val=4:7), 2)) #>   time val #> 1    2   5 #> 2    2   6  # data.frame(time=2, val=5, val_mean=8) casteval:::get_time_point(data.frame(time=1:3, val=4:6, val_mean=7:9), 2) #>   time val val_mean #> 1    2   5        8"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get type of data frame time column — get_time_type","title":"Get type of data frame time column — get_time_type","text":"Inspects data frame's time column returns type.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get type of data frame time column — get_time_type","text":"","code":"get_time_type(df)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get type of data frame time column — get_time_type","text":"df data frame time column.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get type of data frame time column — get_time_type","text":"string, one \"numeric\", \"date\", \"date-time\"","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/get_time_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get type of data frame time column — get_time_type","text":"","code":"# \"numeric\" casteval:::get_time_type(data.frame(time=c(1,2,3))) #> [1] \"numeric\"  # \"date\" casteval:::get_time_type(data.frame(time=lubridate::as_date(1:3))) #> [1] \"date\"  # \"date-time\" casteval:::get_time_type(data.frame(time=lubridate::ymd_hms(\"2024-01-01_12:34:56\"))) #> [1] \"date-time\"  # unsupported type try(casteval:::get_time_type(list(\"January 1\", \"January 2\"))) #> Error in casteval:::get_time_type(list(\"January 1\", \"January 2\")) :  #>   data frame does not contain time column"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/integer_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer breaks on ggplot2 axes — integer_breaks","title":"Integer breaks on ggplot2 axes — integer_breaks","text":"modified version scales::pretty_breaks() integer-valued ticks","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/integer_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer breaks on ggplot2 axes — integer_breaks","text":"","code":"integer_breaks(n = 5, ...)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/integer_breaks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Integer breaks on ggplot2 axes — integer_breaks","text":"https://gist.github.com/jhrcook/eb7b63cc57c683a6eb4986c4107a88ec","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/integer_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer breaks on ggplot2 axes — integer_breaks","text":"n Number breaks. ... arguments passed pretty()","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Is it a forecast? — is_forecast","title":"Is it a forecast? — is_forecast","text":"Determines whether given R object forecast object . R object forecast object :","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is it a forecast? — is_forecast","text":"","code":"is_forecast(fcst)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is it a forecast? — is_forecast","text":"fcst R object","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is it a forecast? — is_forecast","text":"TRUE fcst forecast object, FALSE otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_forecast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is it a forecast? — is_forecast","text":"list (also data frame) name field (may NULL) forecast_time field (may NULL) data field is_forecast() input validation beyond . version function input validation, see is_valid_forecast().","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is it a forecast? — is_forecast","text":"","code":"# FALSE casteval:::is_forecast(5) #> [1] FALSE casteval:::is_forecast(data.frame(time=1, val=2)) #> [1] FALSE  # TRUE casteval:::is_forecast(list(name=NULL, forecast_time=NULL, data=NULL)) #> [1] TRUE"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_valid_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Is it a valid forecast? — is_valid_forecast","title":"Is it a valid forecast? — is_valid_forecast","text":"stricter version is_forecast() validates input using validate_forecast().","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_valid_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is it a valid forecast? — is_valid_forecast","text":"","code":"is_valid_forecast(fcst)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_valid_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is it a valid forecast? — is_valid_forecast","text":"fcst R object","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_valid_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is it a valid forecast? — is_valid_forecast","text":"TRUE fcst passes validate_forecast() without errors, FALSE otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/is_valid_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is it a valid forecast? — is_valid_forecast","text":"","code":"# FALSE casteval:::is_valid_forecast(5) #> [1] FALSE casteval:::is_valid_forecast(list(name=NULL, forecast_time=NULL, data=data.frame(a=1,b=2))) #> [1] FALSE  # TRUE casteval:::is_valid_forecast(list(name=NULL, forecast_time=NULL, data=data.frame(time=1, val=2))) #> [1] TRUE"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/join_fcst_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Join a forecast and observations into a single data frame — join_fcst_obs","title":"Join a forecast and observations into a single data frame — join_fcst_obs","text":"Add observations column forecast data frame containing observations time point.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/join_fcst_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join a forecast and observations into a single data frame — join_fcst_obs","text":"","code":"join_fcst_obs(df, obs)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/join_fcst_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join a forecast and observations into a single data frame — join_fcst_obs","text":"df forecast data frame. obs observations data frame.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/join_fcst_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join a forecast and observations into a single data frame — join_fcst_obs","text":"forecast data frame additional obs column containing observations.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/join_fcst_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join a forecast and observations into a single data frame — join_fcst_obs","text":"","code":"# data.frame(time=1:3, raw=4:6, obs=8:10) casteval:::join_fcst_obs(data.frame(time=1:3, val=4:6), data.frame(time=0:4, val_obs=7:11)) #>   time val val_obs #> 1    1   4       8 #> 2    2   5       9 #> 3    3   6      10  # remove rows with missing observations # data.frame(time=3, val_q50=6, val_obs=7) casteval:::join_fcst_obs(   data.frame(time=1:3, val_q50=4:6),   data.frame(time=2:3, val_obs=c(NA,7)) ) #>   time val_q50 val_obs #> 1    3       6       7  # default behaviour is to error if observations are missing try(casteval:::join_fcst_obs(   data.frame(time=1:3, val_q50=4:6),   data.frame(time=2:3, val_obs=c(NA,7)) )) #>   time val_q50 val_obs #> 1    3       6       7"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/log_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute logarithmic score for forecast — log_score","title":"Compute logarithmic score for forecast — log_score","text":"Given forecast set observations, compute log score every time point. Uses Kernel Density Estimation (KDE) interpolate density observation point.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/log_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute logarithmic score for forecast — log_score","text":"","code":"log_score(fcst, obs, summarize = TRUE, at = NULL, after = NULL, bw = NULL)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/log_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute logarithmic score for forecast — log_score","text":"fcst forecast object (see output create_forecast()). obs observations data frame. summarize boolean, defaults TRUE. TRUE, single number returned score forecast. FALSE, data frame columns named time, val_obs, score returned, containing scores individual time point. can used plotting functions colour-code observations, example. (Optional) time (must compatible fcst obs). specified, score time point returned. Mutually exclusive . (Optional) number. specified, score time fcst$forecast_time + returned. Mutually exclusive . bw (Optional) bandwidth calculating Kernel Density Estimation (see ?scoringRules::logs_sample). provided, bandwidth automatically calculated scoringRules::logs_sample().","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/log_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute logarithmic score for forecast — log_score","text":"summarize FALSE, data frame containing times, observations, scores. Otherwise, score time speficied either .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/log_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute logarithmic score for forecast — log_score","text":"","code":"df <- data.frame(time=c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3), val=c(1:5, 1:5, 1:5)) # return a data frame log_score(   create_forecast(df),   data.frame(time=1:3, val_obs=c(-1, 2.5, 5)),   summarize=FALSE ) #> # A tibble: 3 × 3 #>    time val_obs score #>   <dbl>   <dbl> <dbl> #> 1     1    -1   -4.04 #> 2     2     2.5 -1.65 #> 3     3     5   -2.00  # use `at` parameter to specify absolute times log_score(   create_forecast(df, forecast_time=1),   data.frame(time=1:3, val_obs=c(-1, 2.5, 5)),   at=2 ) #> [1] -1.649454  # use `after` parameter to specify times relative to `forecast_time` log_score(   create_forecast(df, forecast_time=1),   data.frame(time=1:3, val_obs=c(-1, 2.5, 5)),   after=1 ) #> [1] -1.649454"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"accuracy() function factory — make_accuracy","title":"accuracy() function factory — make_accuracy","text":"Given desired quantile pairs, create function wrapping accuracy() passes quantile pairs .","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accuracy() function factory — make_accuracy","text":"","code":"make_accuracy(quant_pairs)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"accuracy() function factory — make_accuracy","text":"quant_pairs See ?accuracy","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"accuracy() function factory — make_accuracy","text":"function wrapping accuracy() given quantile pairs","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"accuracy() function factory — make_accuracy","text":"","code":"fc <- create_forecast(list(   time=1:3,   vals=list(c(4,7,8), c(5,6,7), c(4,6,6)) )) obs <- data.frame(time=1:3, val_obs=5:7)  acc <- make_accuracy(c(5,95)) acc(fc, obs) #> Scoring accuracy using quantile pairs c(5, 95) #> Used 3 time points to calculate accuracy #> [1] 0.6666667  plot_forecast(fc, obs, score=make_accuracy(c(25,75))) #> Scoring accuracy using quantile pairs c(25, 75)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_log_score.html","id":null,"dir":"Reference","previous_headings":"","what":"log_score() function factory — make_log_score","title":"log_score() function factory — make_log_score","text":"Create function wrapping log_score() specified parameters.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_log_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"log_score() function factory — make_log_score","text":"","code":"make_log_score(at = NULL, after = NULL, bw = NULL)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_log_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"log_score() function factory — make_log_score","text":"See ?log_score See ?log_score bw See ?log_score","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_log_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"log_score() function factory — make_log_score","text":"function wrapping log_score() given parameters","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/make_log_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"log_score() function factory — make_log_score","text":"","code":"dat <- c(1.65333590, -0.45354373, -0.72833227, -0.57932896,  0.22393422) fc <- create_forecast(dplyr::tibble(time=rep(1,5), val=dat), forecast_time=1) obs <- data.frame(time=1, val_obs=0)  logs <- make_log_score(at=1) logs(fc, obs) #> [1] -0.9440963  logs2 <- make_log_score(after=0, bw=0.3) logs2(fc, obs) #> [1] -1.075019"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/pair_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Pair up matching quantiles — pair_quantiles","title":"Pair up matching quantiles — pair_quantiles","text":"Given list quantiles, pair together ones symmetrical around median. example, 2.5% quantile 97.5% quantile go together. 50% quantile never paired.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/pair_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pair up matching quantiles — pair_quantiles","text":"","code":"pair_quantiles(quants)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/pair_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pair up matching quantiles — pair_quantiles","text":"quants vector distinct numbers 0 100.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/pair_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pair up matching quantiles — pair_quantiles","text":"named list two elements: paired, list pairs quantiles, unpaired, vector leftover quantiles.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/pair_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pair up matching quantiles — pair_quantiles","text":"","code":"# list(paired=list(c(15,85), c(30,70)), unpaired=c(0,10,20,50,51,60,75)) casteval:::pair_quantiles(c(0, 10, 15, 20, 30, 50, 51, 60, 70, 75, 85)) #> $paired #> $paired[[1]] #> [1] 15 85 #>  #> $paired[[2]] #> [1] 30 70 #>  #>  #> $unpaired #> [1]  0 10 20 50 51 60 75 #>"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/parse_quant_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairs quantile pair(s) — parse_quant_pairs","title":"Pairs quantile pair(s) — parse_quant_pairs","text":"Helper function funtions accept quant_pairs argument. Validates/formats given pairs, infers quantile pairs forecast data.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/parse_quant_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairs quantile pair(s) — parse_quant_pairs","text":"","code":"parse_quant_pairs(quant_pairs, df, allow_empty = FALSE)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/parse_quant_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairs quantile pair(s) — parse_quant_pairs","text":"quant_pairs list pairs, single pair, NULL df forecast data frame allow_empty FALSE, error raised quantile pairs can inferred. TRUE, empty list returned silently. Defaults FALSE.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/parse_quant_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairs quantile pair(s) — parse_quant_pairs","text":"list pairs, either taken quant_pairs inferred df","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/parse_quant_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairs quantile pair(s) — parse_quant_pairs","text":"","code":"# infer from forecast casteval:::parse_quant_pairs(   NULL,   data.frame(time=1, val_q10=2, val_q25=3, val_50=4, val_q75=5, val_q90=6) ) #> [[1]] #> [1] 10 90 #>  #> [[2]] #> [1] 25 75 #>   # single pair casteval:::parse_quant_pairs(   c(2.5,97.5),   data.frame(time=1, val=1) ) #> [[1]] #> [1]  2.5 97.5 #>   # multiple pairs casteval:::parse_quant_pairs(   list(c(2.5,97.5), c(25,75)),   data.frame(time=1, val=1) ) #> [[1]] #> [1]  2.5 97.5 #>  #> [[2]] #> [1] 25 75 #>   # allow empty casteval:::parse_quant_pairs(   NULL,   data.frame(time=1:3, val_q50=4:6),   allow_empty=TRUE ) #> list()  casteval:::parse_quant_pairs(   list(),   data.frame(time=1, val=1),   allow_empty=TRUE ) #> list()"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_KDE.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the KDE used in log_score() — plot_KDE","title":"Plot the KDE used in log_score() — plot_KDE","text":"Create plot displaying density function calculated Kernel Density Estimation (KDE), specified time forecast.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_KDE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the KDE used in log_score() — plot_KDE","text":"","code":"plot_KDE(   fcst,   obs = NULL,   at = NULL,   after = NULL,   bw = NULL,   from = NULL,   to = NULL,   n = 101,   binwidth = NULL )"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_KDE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the KDE used in log_score() — plot_KDE","text":"fcst forecast object (see output create_forecast()). obs (Optional) observations data frame. Data included graph provided (Optional) See ?log_score (Optional) See ?log_score bw (Optional) See ?log_score , (Optional) range density plotted n (Optional) many points calculate density binwidth (Optional) binwidth histogram. confused bw, stands bandwidth unrelated.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_KDE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the KDE used in log_score() — plot_KDE","text":"ggplot object","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_KDE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the KDE used in log_score() — plot_KDE","text":"Creates plot containing: density curve given time calculated KDE forecast data points given time, along x-axis histogram density forecast data points vertical line showing observation given time (provided)","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_KDE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the KDE used in log_score() — plot_KDE","text":"","code":"withr::with_seed(42, {   dat <- rnorm(100)   fc <- create_forecast(dplyr::tibble(time=rep(1,100), val=dat), forecast_time=1)   obs <- data.frame(time=1, val_obs=1)   plot_KDE(fc, obs, at=1)   plot_KDE(fc, obs, at=1, bw=0.1)   plot_KDE(fc, obs, at=1, bw=1) }) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_ensemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ensemble of forecast realizations — plot_ensemble","title":"Plot ensemble of forecast realizations — plot_ensemble","text":"Given forecast raw realizations, generate plot displaying . forecast provides simulation numbers (sim column), ensemble curves plotted. Otherwise, data plotted points.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_ensemble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ensemble of forecast realizations — plot_ensemble","text":"","code":"plot_ensemble(plt = NULL, fcst, alpha = 0.3, colour = \"black\")"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_ensemble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ensemble of forecast realizations — plot_ensemble","text":"plt (Optional) ggplot object. added using + operator. Defaults NULL, case blank ggplot object created. fcst forecast object (see output create_forecast()). alpha (Optional) alpha parameter passed ggplot2 colour (Optional) colour passed ggplot2","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_ensemble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ensemble of forecast realizations — plot_ensemble","text":"ggplot object.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_ensemble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ensemble of forecast realizations — plot_ensemble","text":"","code":"plot_ensemble(   NULL,   create_forecast(dplyr::tibble(time=rep(1:3,each=3), sim=rep(1:3,3), val=c(4:12)) ))   NULL |> plot_ensemble(create_forecast(data.frame(   time=lubridate::as_datetime(c(0,20000,100000)),   val=c(20,30,40) )))"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a forecast — plot_forecast","title":"Plot a forecast — plot_forecast","text":"Plot forecast, along corresponding observations, quantile intervals, etc.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a forecast — plot_forecast","text":"","code":"plot_forecast(   fcst,   obs = NULL,   quant_intervals = NULL,   invert_scale = FALSE,   score = NULL,   ... )"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a forecast — plot_forecast","text":"fcst forecast object (see output create_forecast()). obs (Optional) observations data frame. provided, overlaid forecast points. quant_intervals (Optional) list pairs numbers 0 100, single pair numbers 0 100. provided, score corresponding pairs quantiles calculated. provided, default every symmetrical pair quantiles can found fcst, ordered widest narrowest (e.x. 25% 75% quantiles symmetrical). corresponding quantile intervals, present, displayed resulting plot. quant_intervals can set list() order display quantile intervals. invert_scale (Optional) (Optional) boolean. TRUE, color scale scoring inverted. useful scores smaller values better, e.x. CRPS. score (Optional) scoring function. function used score fcst obs. scoring function accept forecast object, observations data frame, well summarize argument. See ?accuracy, ?log_score examples. See vignette(topic='casteval', package='casteval') details. ... Additional parameters passed score. Note summarize one , since casteval already passes score.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a forecast — plot_forecast","text":"ggplot object","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a forecast — plot_forecast","text":"","code":"fc <- create_forecast(list(   time=1:3,   vals=list(c(4,7,8), c(5,6,7), c(4,6,6)) )) obs <- data.frame(time=1:3, val_obs=5:7)  # plot forecast plot_forecast(fc)   # plot forecast and observations plot_forecast(fc, obs)   # plot forecast and quantile interval(s) plot_forecast(fc, quant_intervals=list(c(25,75), c(2.5,97.5)))   # highlight the observations inside the quantile interval plot_forecast(fc, obs, quant_intervals=c(2.5,97.5), score=make_accuracy(c(2.5,97.5))) #> Scoring accuracy using quantile pairs c(2.5, 97.5)   # show the log score of each observation plot_forecast(fc, obs, score=log_score)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot forecast mean — plot_mean","title":"Plot forecast mean — plot_mean","text":"Given forecast data, plot mean","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot forecast mean — plot_mean","text":"","code":"plot_mean(plt = NULL, fcst, alpha = 0.5, colour = \"green\", linewidth = 2)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot forecast mean — plot_mean","text":"plt (Optional) ggplot object. added using + operator. Defaults NULL, case blank ggplot object created. fcst forecast object (see output create_forecast()). alpha (Optional) alpha parameter passed ggplot2 colour (Optional) colour passed ggplot2 linewidth linewidth parameter passed ggplot2::geom_line()","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot forecast mean — plot_mean","text":"ggplot object","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot forecast mean — plot_mean","text":"","code":"fc <- create_forecast(   data.frame(time=1:5, val_mean=6:10) )  NULL |> plot_mean(fc, colour=\"red\", alpha=0.5)   fc2 <- create_forecast(   data.frame(time=rep(1:5, each=3), val=c(1,2,3, 4,7,5, 10,11,10, 0,0,0, 1,2,2)) )  NULL |> plot_mean(fc2)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_obs_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot and score against observations — plot_obs_score","title":"Plot and score against observations — plot_obs_score","text":"Wrapper plot_observations(). Scores given forecast given observations, plots observations colour scale corresponding score.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_obs_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot and score against observations — plot_obs_score","text":"","code":"plot_obs_score(plt = NULL, fcst, obs, invert_scale = FALSE, score, ...)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_obs_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot and score against observations — plot_obs_score","text":"plt (Optional) ggplot object. added using + operator. Defaults NULL, case blank ggplot object created. fcst forecast object (see output create_forecast()). obs observations data frame invert_scale (Optional) boolean. TRUE, color scale inverted. useful scores smaller values better, e.x. CRPS. score (Optional) scoring function. function used score fcst obs. scoring function accept forecast object, observations data frame, well summarize argument. See ?accuracy, ?log_score examples. See vignette(topic='casteval', package='casteval') details. ... Additional parameters passed score. Note summarize one , since casteval already passes score.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_obs_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot and score against observations — plot_obs_score","text":"ggplot object","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_obs_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot and score against observations — plot_obs_score","text":"","code":"fc <- create_forecast(list(   time=1:10,   vals=list(     c(1,2,3,5,4,5,4,6,6,5),     c(1,3,5,4,6,5,7,9,8,8),     c(1,4,3,4,5,6,5,3,2,2),     c(1,2,4,5,7,8,7,9,10,9)   ) ))  obs <- data.frame(time=1:10, val_obs=c(1,4,8,10,11,8,5,3,3,2))  NULL |> plot_obs_score(fc, obs, score=log_score, bw=2)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot observations — plot_observations","title":"Plot observations — plot_observations","text":"Plot observation points. scores provided alongside observations, plot can colour-coded convey information score, accuracy, etc.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot observations — plot_observations","text":"","code":"plot_observations(plt = NULL, obs, alpha = 0.4, colour = \"black\")"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot observations — plot_observations","text":"plt (Optional) ggplot object. added using + operator. Defaults NULL, case blank ggplot object created. obs observations data frame. contains score column, observation points colour-coded according scores. Otherwise, alpha colour parameters determine opacity colour points. alpha (Optional) alpha parameter passed ggplot2 colour (Optional) colour passed ggplot2","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot observations — plot_observations","text":"ggplot object.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_observations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot observations — plot_observations","text":"","code":"fc <- create_forecast(list(   time=1:3,   vals=list(c(4,7,10), c(5,8,11), c(6,9,12)) )) obs <- data.frame(time=1:3, val_obs=c(5,9,13))  # plot observations on their own plot_observations(NULL, obs)   # plot observations alongside forecast data plot_observations(plot_ensemble(NULL, fc), obs)   # plot observations alongside forecast data, and colour-code by score plot_observations(   plot_ensemble(NULL, fc),   log_score(fc, obs, summarize=FALSE) )"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quant_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot quantile intervals — plot_quant_intervals","title":"Plot quantile intervals — plot_quant_intervals","text":"Given forecast data, highlight specified quantile intervals.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quant_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot quantile intervals — plot_quant_intervals","text":"","code":"plot_quant_intervals(   plt = NULL,   fcst,   quant_intervals = NULL,   alpha = NULL,   palette = 1 )"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quant_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot quantile intervals — plot_quant_intervals","text":"plt (Optional) ggplot object. added using + operator. Defaults NULL, case blank ggplot object created. fcst forecast object (see output create_forecast()). quant_intervals (Optional) list pairs numbers 0 100, single pair numbers. provided, quantile intervals inferred forecast. Otherwise, pair used quantile intervals. alpha (Optional) alpha parameter passed ggplot2 palette (Optional) colour palette use (see ?ggplot2::scale_fill_brewer)","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quant_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot quantile intervals — plot_quant_intervals","text":"ggplot object.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quant_intervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot quantile intervals — plot_quant_intervals","text":"","code":"# forecast with quantile data fc1 <- create_forecast(dplyr::tibble(   time=1:3,   val_q5=8:6, val_q95=22:20,   val_q10=10:8, val_q90=20:18,   val_q25=14:12, val_q75=16:14 ))  # forecast with raw data fc2 <- create_forecast(dplyr::tibble(   time=rep(1:3, each=5),   sim=rep(1:5, 3),   val=c(c(3,5,6,7,3), c(6,8,7,8,7), c(11,15,13,14,17)) ))  # infer quantile pairs plot_quant_intervals(NULL, fc1)   # manually specify quantile pairs plot_quant_intervals(NULL, fc1, list(c(5,95), c(10,90)))   # quantile pairs must be specified for raw data plot_quant_intervals(NULL, fc2, list(c(5, 95), c(25,75)))"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot forecast quantiles — plot_quantiles","title":"Plot forecast quantiles — plot_quantiles","text":"Given forecast data, plot requested quantiles lines","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot forecast quantiles — plot_quantiles","text":"","code":"plot_quantiles(plt = NULL, fcst, quants = NULL, alpha = 1, colour = \"orange\")"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot forecast quantiles — plot_quantiles","text":"plt (Optional) ggplot object. added using + operator. Defaults NULL, case blank ggplot object created. fcst forecast object (see output create_forecast()). quants (Optional) vector numbers 0 100, quantiles graphed. provided, quantile columns fcst$data used. alpha (Optional) alpha parameter passed ggplot2 colour (Optional) colour passed ggplot2","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot forecast quantiles — plot_quantiles","text":"ggplot object","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/plot_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot forecast quantiles — plot_quantiles","text":"","code":"fc <- create_forecast(list(   time=1:10,   vals=list(     c(1,2,3,5,4,5,4,6,6,5),     c(1,3,5,4,6,5,7,9,8,8),     c(1,4,3,4,5,6,5,3,2,2),     c(1,2,4,5,7,8,7,9,10,9)   ) ))  NULL |> plot_ensemble(fc) |> plot_quantiles(fc, quants=c(2.5, 50, 97.5))   fc2 <- create_forecast(data.frame(   time=1:10,   val_q2.5=1:10,   val_q25=2:11,   val_q50=3:12,   val_q75=4:13,   val_q97.5=5:14 ))  NULL |> plot_quantiles(fc2)  NULL |> plot_quantiles(fc2, quants=c(2.5,50,97.5))"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/quant_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn quantile number into column name — quant_name","title":"Turn quantile number into column name — quant_name","text":"Given number, returns column name corresponding quantile column","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/quant_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn quantile number into column name — quant_name","text":"","code":"quant_name(num)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/quant_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn quantile number into column name — quant_name","text":"num quantile number.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/quant_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn quantile number into column name — quant_name","text":"quantile column name.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/quant_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn quantile number into column name — quant_name","text":"","code":"# \"val_q50\" casteval:::quant_name(50) #> [1] \"val_q50\"  # \"val_q2.5\" casteval:::quant_name(2.5) #> [1] \"val_q2.5\""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/score.html","id":null,"dir":"Reference","previous_headings":"","what":"Score forecasts — score","title":"Score forecasts — score","text":"Score forecast observations using given scoring function. Additional parameters can passed along scoring function.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score forecasts — score","text":"","code":"score(fcsts, obs, fun, ...)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score forecasts — score","text":"fcsts single forecast object, list forecast objects obs observations data frame fun scoring function. fcst obs passed ... Additional parameters passed along fun","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score forecasts — score","text":"fcsts forecast object, single score returned. fcsts list forecast objects, list scores returned.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Score forecasts — score","text":"See vignette(\"scoring\") complete list scoring functions available, along details use. s","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score forecasts — score","text":"","code":"fc1 <- create_forecast(data.frame(time=1:5, val=6:10)) fc2 <- create_forecast(data.frame(time=1:5, val=7:11))  obs <- data.frame(time=1:5, val_obs=c(8,8,8,8,8))  score(fc1, obs, bias) #> [1] 0 score(fc2, obs, bias) #> [1] 0.4 score(list(fc1, fc2), obs, bias) #> [[1]] #> [1] 0 #>  #> [[2]] #> [1] 0.4 #>"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that column is in data frame — validate_column","title":"Check that column is in data frame — validate_column","text":"Errors col column data frame.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that column is in data frame — validate_column","text":"","code":"validate_column(df, col)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that column is in data frame — validate_column","text":"df data frame. col string containing column name.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that column is in data frame — validate_column","text":"NULL valid, error otherwise.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that column is in data frame — validate_column","text":"","code":"casteval:::validate_column(   data.frame(time=1, raw=4, quant_25=6, quant_75=8),   \"quant_25\" ) try(casteval:::validate_column(   data.frame(time=1, raw=4),   \"mean\" )) #> Error in casteval:::validate_column(data.frame(time = 1, raw = 4), \"mean\") :  #>   column `mean` not in data frame"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate forecast data frame — validate_data_frame","title":"Validate forecast data frame — validate_data_frame","text":"Given data frame, checks :","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate forecast data frame — validate_data_frame","text":"","code":"validate_data_frame(df)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate forecast data frame — validate_data_frame","text":"df data frame","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate forecast data frame — validate_data_frame","text":"NULL success. Error otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_data_frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate forecast data frame — validate_data_frame","text":"empty valid time column quantile columns properly named values order least one data column data columns numeric","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate forecast data frame — validate_data_frame","text":"","code":"# valid casteval:::validate_data_frame(data.frame(   time=1:3,   val=4:6 ))  # invalid (summary and unsummary data) try(casteval:::validate_data_frame(data.frame(   time=1:3,   val=4:6,   val_mean=7:9 ))) #> Error in casteval:::validate_data_frame(data.frame(time = 1:3, val = 4:6,  :  #>   both summarized and unsummarized (`val`) data provided  # invalid (no data columns) try(casteval:::validate_data_frame(data.frame(   time=1:3 ))) #> Error in casteval:::validate_data_frame(data.frame(time = 1:3)) :  #>   data frame contains no data columns"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_fcst_obs_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a forecast-observations pair — validate_fcst_obs_pair","title":"Validate a forecast-observations pair — validate_fcst_obs_pair","text":"Given forecast observations, verify : forecast valid observations valid forecast time type matches observations time type","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_fcst_obs_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a forecast-observations pair — validate_fcst_obs_pair","text":"","code":"validate_fcst_obs_pair(fcst, obs)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_fcst_obs_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a forecast-observations pair — validate_fcst_obs_pair","text":"fcst forecast object (see output create_forecast()). obs observations data frame.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_fcst_obs_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a forecast-observations pair — validate_fcst_obs_pair","text":"NULL valid. Error otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_fcst_obs_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a forecast-observations pair — validate_fcst_obs_pair","text":"","code":"# compatible time types casteval:::validate_fcst_obs_pair(   create_forecast(data.frame(time=1:10, val=11:20)),   data.frame(time=101:110, val_obs=111:120) )  # incompatible time types try(casteval:::validate_fcst_obs_pair(   create_forecast(data.frame(time=1:10, val=11:20)),   data.frame(time=lubridate::ymd(\"2024-01-01\"), val_obs=5) )) #> Error in casteval:::validate_fcst_obs_pair(create_forecast(data.frame(time = 1:10,  :  #>   observations time type must match forecast time type"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate forecast in named-list format — validate_forecast","title":"Validate forecast in named-list format — validate_forecast","text":"validate_forecast() validates forecast checking : named list contains valid data frame forecast time compatible time type conditions fail, stops appropriate error message","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate forecast in named-list format — validate_forecast","text":"","code":"validate_forecast(fcst)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate forecast in named-list format — validate_forecast","text":"fcst object validated","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate forecast in named-list format — validate_forecast","text":"NULL valid (error invalid)","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate forecast in named-list format — validate_forecast","text":"","code":"# valid forecast casteval:::validate_forecast(list(   name=\"hello\",   forecast_time=5,   data=data.frame(time=1:3, val=4:6) ))  # not a forecast try(casteval:::validate_forecast(data.frame(time=1:3, val=4:6))) #> Error in casteval:::validate_forecast(data.frame(time = 1:3, val = 4:6)) :  #>   forecast must be named list containing data frame, not just a data frame  # bad forecast_time type try(casteval:::validate_forecast(list(   forecast_time=lubridate::as_date(1000),   data=data.frame(time=1:3, val=4:6) ))) #> Error in validate_time(fcst$forecast_time, fcst) :  #>   type of `t` does not match `fcst$time_type`"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate observations data frame — validate_obs","title":"Validate observations data frame — validate_obs","text":"Check given object: data frame empty contains valid time column contains numeric val_obs column","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate observations data frame — validate_obs","text":"","code":"validate_obs(obs)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate observations data frame — validate_obs","text":"obs observations object.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate observations data frame — validate_obs","text":"NULL valid, error otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate observations data frame — validate_obs","text":"","code":"# valid casteval:::validate_obs(   data.frame(time=1:3, val_obs=4:6) )  # valid (contains `score` column) casteval:::validate_obs(   data.frame(time=1:3, val_obs=4:6, score=c(1, 0, -1)) )  # invalid try(casteval:::validate_obs(   data.frame(time=1:3, val_obs=c(\"a\", \"b\", \"c\")) )) #> Error in casteval:::validate_obs(data.frame(time = 1:3, val_obs = c(\"a\",  :  #>   obs$val_obs must be numeric"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a single quantile — validate_quant","title":"Validate a single quantile — validate_quant","text":"Given quantile, check : single number 0 100, inclusive","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a single quantile — validate_quant","text":"","code":"validate_quant(quant)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a single quantile — validate_quant","text":"quant quantile validate","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a single quantile — validate_quant","text":"NULL valid, error otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a single quantile — validate_quant","text":"","code":"# valid casteval:::validate_quant(50) casteval:::validate_quant(0) casteval:::validate_quant(100) casteval:::validate_quant(2.5)  # invalid try(casteval:::validate_quant(\"50\")) #> Error in casteval:::validate_quant(\"50\") : `quant` must be numeric try(casteval:::validate_quant(-1)) #> Error in casteval:::validate_quant(-1) :  #>   `quant` must be between 0 and 100 try(casteval:::validate_quant(c(25,75))) #> Error in casteval:::validate_quant(c(25, 75)) :  #>   `quant` must be exactly 1 number, received numeric vector of length 2"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate quantile column name — validate_quant_name","title":"Validate quantile column name — validate_quant_name","text":"Check quantile column name starts val_q followed number 0 100.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate quantile column name — validate_quant_name","text":"","code":"validate_quant_name(name)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate quantile column name — validate_quant_name","text":"name string containing quantile column name","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate quantile column name — validate_quant_name","text":"NULL valid. Error otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate quantile column name — validate_quant_name","text":"","code":"# valid casteval:::validate_quant_name(\"val_q97.5\") casteval:::validate_quant_name(\"val_q50\") casteval:::validate_quant_name(\"val_q100\") casteval:::validate_quant_name(\"val_q0\")  # invalid try(casteval:::validate_quant_name(\"val_q50abc\")) #> Error in casteval:::validate_quant_name(\"val_q50abc\") :  #>   invalid quantile percentage NA try(casteval:::validate_quant_name(\"val_q101\")) #> Error in casteval:::validate_quant_name(\"val_q101\") :  #>   quantile percentage 101 out of range try(casteval:::validate_quant_name(\"val_q-1\")) #> Error in casteval:::validate_quant_name(\"val_q-1\") :  #>   quantile percentage -1 out of range try(casteval:::validate_quant_name(\"hello\")) #> Error in casteval:::validate_quant_name(\"hello\") :  #>   invalid quantile column name hello"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure quantile values are logically possible — validate_quant_order","title":"Make sure quantile values are logically possible — validate_quant_order","text":"Checks values quantile columns increasing order time point. , x < y, df$quant_x[[]] <= df$quant_y[[]] must hold true 1 <= <= nrow(df)","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure quantile values are logically possible — validate_quant_order","text":"","code":"validate_quant_order(df)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure quantile values are logically possible — validate_quant_order","text":"df forecast data frame, time column 0 quant_* columns","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make sure quantile values are logically possible — validate_quant_order","text":"NULL valid, error otherwise.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make sure quantile values are logically possible — validate_quant_order","text":"","code":"try(   casteval:::validate_quant_order(data.frame(time=1:3, quant_25=4:6, quant_75=c(4,4,4))) ) casteval:::validate_quant_order(data.frame(time=1:3, quant_2.5=4:6, quant_50=c(4,6,8)))"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate quantile interval vector — validate_quant_pair","title":"Validate quantile interval vector — validate_quant_pair","text":"Given quantile pair, check valid. valid quantile pair numeric vector length 2 values 0 100, first number smaller second.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate quantile interval vector — validate_quant_pair","text":"","code":"validate_quant_pair(pair)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate quantile interval vector — validate_quant_pair","text":"pair element quant_pairs","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate quantile interval vector — validate_quant_pair","text":"NULL valid. Error otherwise.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_quant_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate quantile interval vector — validate_quant_pair","text":"","code":"# valid casteval:::validate_quant_pair(c(50, 70))  # invalid try(casteval:::validate_quant_pair(c(70, 50))) #> Error in casteval:::validate_quant_pair(c(70, 50)) :  #>   first quantile in pair must be less than second quantile in pair  # invalid try(casteval:::validate_quant_pair(c(-1, 50))) #> Error in casteval:::validate_quant_pair(c(-1, 50)) :  #>   quantiles in pair must be between 0 and 100, inclusive  # invalid try(casteval:::validate_quant_pair(c(50,60,70))) #> Error in casteval:::validate_quant_pair(c(50, 60, 70)) :  #>   quantile pair must have length 2  # invalid try(casteval:::validate_quant_pair(\"50, 60\")) #> Error in casteval:::validate_quant_pair(\"50, 60\") :  #>   quantile pair must be vector of 2 numbers"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that time compatible with forecast — validate_time","title":"Check that time compatible with forecast — validate_time","text":"Check type given time matches time type given forecast.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that time compatible with forecast — validate_time","text":"","code":"validate_time(t, fcst)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that time compatible with forecast — validate_time","text":"t time (e.x. number, date, date-time). fcst forecast object (see output create_forecast()).","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that time compatible with forecast — validate_time","text":"NULL t compatible fcst. Error otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that time compatible with forecast — validate_time","text":"","code":"# both numeric (compatible) casteval:::validate_time(5, create_forecast(data.frame(time=6,val=7))) #> NULL  # one date, one date-time (incompatible) try(casteval:::validate_time(   lubridate::ymd(\"2024-01-01\"),   create_forecast(data.frame(time=lubridate::ymd_hms(\"2024-01-01_00:00:00\"),val=6)) )) #> Error in casteval:::validate_time(lubridate::ymd(\"2024-01-01\"), create_forecast(data.frame(time = lubridate::ymd_hms(\"2024-01-01_00:00:00\"),  :  #>   type of `t` does not match `fcst$time_type`"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate time column — validate_time_column","title":"Validate time column — validate_time_column","text":"Check type time column valid.","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate time column — validate_time_column","text":"","code":"validate_time_column(times)"},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate time column — validate_time_column","text":"times vector, presumably time column","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate time column — validate_time_column","text":"NULL valid, error otherwise","code":""},{"path":"https://phac-nml-phrsd.github.io/casteval/reference/validate_time_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate time column — validate_time_column","text":"","code":"# valid casteval:::validate_time_column(c(1,2,3)) casteval:::validate_time_column(lubridate::as_date(1000:1010)) casteval:::validate_time_column(lubridate::as_datetime(10000:10100))  # invalid try(casteval:::validate_time_column(list(1,2,3))) #> Error in casteval:::validate_time_column(list(1, 2, 3)) :  #>   time column must be either numeric, Date, or date-time (POSIXt) vector try(casteval:::validate_time_column(c(\"monday\", \"tuesday\"))) #> Error in casteval:::validate_time_column(c(\"monday\", \"tuesday\")) :  #>   time column must be either numeric, Date, or date-time (POSIXt) vector"}]
